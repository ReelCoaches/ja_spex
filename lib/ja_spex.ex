defmodule JaSpex do
  @moduledoc """
  A bridge between `OpenApiSpex` and `JaSerializer`.

  Using JaSpex, you can significantly reduce the boilerplate code
  required to validate requests in your Open API format and deserialize
  the data using JaSerializer conventions.

  JaSpex has 3 main public components:

    * `JaSpex.SchemaParser` - An implementation of `JaSerializer.ParamParser` for
    structs generated by `OpenApiSpex.Schema`.

    * `JaSpex.Deserializer` - A replacement for `JaSerializer.Deserializer`,
    which should be called after casting and validating with OpenApiSpex.

    * `JaSpex.RenderError` - An error handler for `OpenApiSpex.Plug.Validate`. It
    renders errors according to the JSON-API spec.

  When used in your `OpenApiSpex.Schema`, the `JaSpex` module provides the SchemaParser:

      defmodule Article do
        use JaSpex

        # require OpenApiSpex
        # OpenApiSpex.schema(%Schema{...})
      end

  When used as a Plug, the `JaSpex` module provides the cast/validate/deserialize workflow
  to bridge OpenApiSpex and JaSerializer:

      defmodule ArticleController do
        use Phoenix.Controller

        plug JaSpex

      end

  When using JaSpex as a Plug, be sure to remove these other plugs from your pipeline:

      * - `JaSerializer.Deserializer`
      * - `OpenApiSpex.Plug.Cast`
      * - `OpenApiSpex.Plug.Validate`
      * - `OpenApiSpex.Plug.CastAndValidate`

  If you require more control over the cast/validate process, use `JaSpex.Deserializer` directly:

      defmodule ArticleController do
        use Phoenix.Controller

        plug OpenApiSpex.Plug.Cast
        plug OpenApiSpex.Plug.Validate, render_error: JaSpex.RenderError
        plug JaSpex.Deserializer

        # ...
      end

  For more information on using JaSpex with Phoenix, see `JaSpex.Controller`.
  """

  @doc false
  defmacro __using__(opts) do
    quote do
      use JaSpex.SchemaParser, unquote(opts)
    end
  end

  @content_type "application/vnd.api+json"

  @doc """
  Returns the content type for JSON-API, `"application/vnd.api+json"`.

  ## Examples

      iex> JaSpex.jsonapi()
      "application/vnd.api+json"

  This function is imported when you `use JaSpex.Controller` so it
  can be used as a helper for specifying Open API operations:

      def operation_show do
        %Operation{
          responses: %{
            200 => Operation.response("Show", jsonapi(), Response)
          }
        }
      end
  """
  def jsonapi, do: @content_type

  # Plug callbacks

  defdelegate init(opts), to: JaSpex.Plug
  defdelegate call(conn, opts), to: JaSpex.Plug
end
